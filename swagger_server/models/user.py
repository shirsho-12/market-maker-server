# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.order import Order  # noqa: F401,E501
from swagger_server.models.trade import Trade  # noqa: F401,E501
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, score: float=None, buy_orders: List[Order]=None, sell_orders: List[Order]=None, buys: List[Trade]=None, sells: List[Trade]=None):  # noqa: E501
        """User - a model defined in Swagger

        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param score: The score of this User.  # noqa: E501
        :type score: float
        :param buy_orders: The buy_orders of this User.  # noqa: E501
        :type buy_orders: List[Order]
        :param sell_orders: The sell_orders of this User.  # noqa: E501
        :type sell_orders: List[Order]
        :param buys: The buys of this User.  # noqa: E501
        :type buys: List[Trade]
        :param sells: The sells of this User.  # noqa: E501
        :type sells: List[Trade]
        """
        self.swagger_types = {
            'name': str,
            'id': str,
            'score': float,
            'buy_orders': List[Order],
            'sell_orders': List[Order],
            'buys': List[Trade],
            'sells': List[Trade]
        }

        self.attribute_map = {
            'name': 'name',
            'id': 'id',
            'score': 'score',
            'buy_orders': 'buy_orders',
            'sell_orders': 'sell_orders',
            'buys': 'buys',
            'sells': 'sells'
        }
        self._name = name
        self._id = id
        self._score = score
        self._buy_orders = buy_orders
        self._sell_orders = sell_orders
        self._buys = buys
        self._sells = sells

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this User.

        User name  # noqa: E501

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.

        User name  # noqa: E501

        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self) -> str:
        """Gets the id of this User.

        User ID  # noqa: E501

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.

        User ID  # noqa: E501

        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def score(self) -> float:
        """Gets the score of this User.

        User balance  # noqa: E501

        :return: The score of this User.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this User.

        User balance  # noqa: E501

        :param score: The score of this User.
        :type score: float
        """

        self._score = score

    @property
    def buy_orders(self) -> List[Order]:
        """Gets the buy_orders of this User.

        User buy orders  # noqa: E501

        :return: The buy_orders of this User.
        :rtype: List[Order]
        """
        return self._buy_orders

    @buy_orders.setter
    def buy_orders(self, buy_orders: List[Order]):
        """Sets the buy_orders of this User.

        User buy orders  # noqa: E501

        :param buy_orders: The buy_orders of this User.
        :type buy_orders: List[Order]
        """

        self._buy_orders = buy_orders

    @property
    def sell_orders(self) -> List[Order]:
        """Gets the sell_orders of this User.

        User sell orders  # noqa: E501

        :return: The sell_orders of this User.
        :rtype: List[Order]
        """
        return self._sell_orders

    @sell_orders.setter
    def sell_orders(self, sell_orders: List[Order]):
        """Sets the sell_orders of this User.

        User sell orders  # noqa: E501

        :param sell_orders: The sell_orders of this User.
        :type sell_orders: List[Order]
        """

        self._sell_orders = sell_orders

    @property
    def buys(self) -> List[Trade]:
        """Gets the buys of this User.

        User buy transactions  # noqa: E501

        :return: The buys of this User.
        :rtype: List[Trade]
        """
        return self._buys

    @buys.setter
    def buys(self, buys: List[Trade]):
        """Sets the buys of this User.

        User buy transactions  # noqa: E501

        :param buys: The buys of this User.
        :type buys: List[Trade]
        """

        self._buys = buys

    @property
    def sells(self) -> List[Trade]:
        """Gets the sells of this User.

        User sell transactions  # noqa: E501

        :return: The sells of this User.
        :rtype: List[Trade]
        """
        return self._sells

    @sells.setter
    def sells(self, sells: List[Trade]):
        """Sets the sells of this User.

        User sell transactions  # noqa: E501

        :param sells: The sells of this User.
        :type sells: List[Trade]
        """

        self._sells = sells
    
    def pnl(self, final_val, binary = False):
        if binary:
            sign = lambda x: x//abs(x) if x != 0 else 0
            return sum([i[1] * sign(final_val - i[0]) for i in self._buys]) + sum([i[1] * sign(i[0] - final_val) for i in self._sells])
        return final_val * self._score - sum([i[0] * i[1] for i in self._buys]) + sum([i[0] * i[1] for i in self._sells])
    
    def add_buy(self, price, quantity):
        self._buys.append([price, quantity])
        self._score += quantity


    def add_sell(self, price, quantity):
        self._sells.append([price, quantity])
        self._score -= quantity

    def get_orderbook(self, bids, asks):
        bids = [[i[0], i[1], 0] for i in bids]
        asks = [[i[0], i[1], 0] for i in asks]

        # Lower part of the code can be easily optimised with binary search but too lazy right now
        for i in self._buy_orders:
            for j in range(len(bids)):
                if i.price == bids[j][0]:
                    bids[j][2] += i.size
                    break

        for i in self._sell_orders:
            for j in range(len(asks)):
                if i.price == asks[j][0]:
                    asks[j][2] += i.size
                    break

