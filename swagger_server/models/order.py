# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, quantity: int=None, price: float=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param type: The type of this Order.  # noqa: E501
        :type type: str
        :param quantity: The quantity of this Order.  # noqa: E501
        :type quantity: int
        :param price: The price of this Order.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'type': str,
            'quantity': int,
            'price': float
        }

        self.attribute_map = {
            'type': 'type',
            'quantity': 'quantity',
            'price': 'price'
        }

        self._type = type
        self._quantity = quantity
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this Order.

        Order type (buy or sell)  # noqa: E501

        :return: The type of this Order.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Order.

        Order type (buy or sell)  # noqa: E501

        :param type: The type of this Order.
        :type type: str
        """
        allowed_values = ["buy", "sell"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Order.

        Order quantity  # noqa: E501

        :return: The quantity of this Order.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Order.

        Order quantity  # noqa: E501

        :param quantity: The quantity of this Order.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def price(self) -> float:
        """Gets the price of this Order.

        Order price  # noqa: E501

        :return: The price of this Order.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Order.

        Order price  # noqa: E501

        :param price: The price of this Order.
        :type price: float
        """

        self._price = price
